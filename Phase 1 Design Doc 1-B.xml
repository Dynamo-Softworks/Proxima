Phase 1 Design Doc 1-B
	Archsystem: Electrical Simulation
	Subsystem: Component Level Behaviour
	
Auxiliary Systems:
	Component Database
	Component Class Inheritance Tree
Interfacing With:
	UI
	Macro Simulation
	Script Generation
	openGL pipeline
	



 Components are created as instances of appropriate classes, with fields filled in from a component database. The component class defines the basic fields that all components have, like position on screen, polarity(or not), current state, current voltage, current current, and resistance, and contains methods for transferring voltage and current to other components, as well as dealing with sending electricity in the correct direction. Classes defining specific types of components inherit from this generic component class, and subclasses are defined from there. An example of this tree could be as follows:
 
 Generic>Diode>LED
 or
 Generic>Switch>Semiconductor>Transistor
 or as a another possibility
 Generic>Switch>Tactile>Button
 
 
 Whether or not inductance and capacitance will be simulated is up to debate, as many of the effects of these properties for most components are negligible. These properties may only be simulated for components that specifically deal with those properties, such as inductors, solenoids, capacitors, etc. It is recommended that team members read up on the basic types of electrical components, as if those are able to be simulated, and are able to interact with other components, devices ranging from light switches to entire computers are theoretically possible to simulate, though for complex machines, scripts are probably more performance friendly. In that regards, some sort of script builder needs to be developed to handle the conversion of circuit behaviour to some form of script that can be ran faster and has the same properties. Such a marriage of the scripting and component method for a circuit simulator allows players to familiarize themselves with the low level, while also having access to the high level. Scripts could be saved as "blocks" that could aid in UI simplicity, and allow large pieces of electronic structure to be dealt with easily. If these scripts also remembered where the initial component structure is stored, the player could also dig down into a circuit 'block', make changes to the structure there, from which the game would automatically recompile the circuit into a new script, preserving the old and allowing fast prototyping of the new. This system would be beneficial on a couple of levels, as it allows the player to easily reuse pieces of previous projects, allows the player to easily make changes, and also keeps the UI clean and easy to read. It also opens the opportunity for players to easily share script files bundled with the appropriate circuitry structure files, allowing players to see just what makes another player's project tick.
 
 How electricity itself will be handled is another matter. Would electricity be some sort of an object, or more of a combination of field values that gets passed on to other components?
 
 Interfacing the circuit with the outside game world is also a hurdle that needs to be cleared. How would switches be activated? How would every circuit be simulated without losing performance? How would all of this information be stored, saved, and reloaded in a timely manner? These problems are not an issue when only considered in the reference frame of the circuit builder/simulation mechanic, but how are these things going to be pulled together in the macro station simulator? How is performance going to be kept down so that this game is playable an average PC? All of these questions need to be considered and solved before this Archsystem can be considered complete.
 
 
 
 Example Component Tree
 Generic>   Diode>
                    Generic_LED
                    Generic_Diode
            
            
            Switch>
                    Tactile>    GenericButton
                                GenericSwitch
                                
                    
                    SolidState>
                                Generic_NPN_Transistor
                                et.
                    
                    Vacuum Tube>
                                Generic_Audio_Tube
                                etc.
            
            
            Power Supply>
                    Battery>
                            Generic_Battery
                            Generic_Rechargable_Battery
                            
                    
                    Generator>
                            Generic_AC
                            Generic_DC
                                        
            
            Capacitor
                    High_Voltage>
                            Generic_High_Volatge_Cap
                            Generic_Capcitor_Bank
                            
                    Low_Voltage>
                            Generic_Low_Voltage_Cap
                         
            
            
            Inductor
            
            Sensor
            
            
            
 Alright. So I have an idea. I am currently in the process of building a components system with two base classes, components and connectors. Components pretty much work as described above, and have some basic properties that determine how it behaves. Connectors are the other part of the equation. They determine how components interact with each other. For now, all connectors will behave the same way, but I hope for Proxima to have multiple types of connectors. One type may be more durable, or be able to take more load than another type, at the price of having a higher resistance or emitting higher amounts of radiation. Depending on the bot doing the circuit, the connectors might be of a different base quality as well, much like an inexperienced human solderer makes worse joints than an experienced one in real life.
 
 Note: Durability, max loads, etc. have not been implemented. I am focusing on getting a command line program to be able to have a number of components, in a simulated 3D environment (not rendered) that are connected and have electricity flowing through the system accurately.

 In essence, a connector will be "attached" to one component as either an input, or an output, and will bridge two components together. These connectors are the equivalent of solder joints in real life. 
 
 
 Another conceptual idea. A circuit can have bits that are in series, and other bits that are in parallel. Those bits I am going to refer to as tracks. If I can figure out how to group components into tracks, I can more easily calculate how much power each component needs. In order to calculate the resistance of a part of a circuit, I need to be able to organize the components into tracks, and then organize the tracks into circuits. That bit is giving me trouble. I want to try and think of the tracks as a one dimensional array of components, and the a circuit as an array of tracks, but I don't know how to generate arrays (I am pretty sure what I need are dynamic arrays) that don't need to have a predetermined number of slots. I then need to figure out how to dynamically generate those arrays, and then get components to organize themselves into arrays by themselves based on how they are connected. Then I need to build functions that can reference dynamically generated arrays, and the components in them, to transfer current.
 
  Figuring out how to get these arrays to relate themselves to each other will be the biggest issue. I want to think about these arrays as an array "tree". The power source is at the beginning of the tree and at the end of the tree. Only problem is if there are multiple power sources. I have had the conceptual breakthrough necessary to figure out how to structure that in tree form. If each power source started it's own tree, then a broadcast component could be used to transfer voltage (discussed in the next '()'), but that isn't realistic. Electricity just flows. I want to figure out how to get it to do just that, without having complex component structures to do all the work. I think code would be simpler if the electricity itself did the thinking in terms of how much current and voltage it currently carried in a specific place, rather than relying on the component structure itself to do the work. Then again, that isn't really how circuits work. The voltage changes based on the resistances of all the components, and the current at any point in the circuit depends on the structure of the circuit itself, and the resistances. Right now, array trees seem to be the way to go, with some way of having the circuit itself decide when to use broadcasters to handle multiple power sources as separate but integrated circuits entirely. It's not a bad way to go, and come to think of it, I don't really see many devices that use multiple power sources anyway. This will only really come into its own when station simulation is implemented, and even that is really just loads of circuits being simulated in the same space at the same time, probably with some sort of LOD system to lower cpu requirements. LOD will be weird to do here, because we will have to have the game figure out just what a circuit does, and then just do that until something changes, to avoid simulating each and every circuit all the stinking time. That, or just increasing the number of graphics frames that are allowed to pass before going through the next simulation cycle. [By that I mean that the game will have a simulation cycle, and a graphics cycle, each on its own thread. The two work of the same info, but the simulation does all the changin' and the graphics do all the displayin'. Decoupling the two will hopefully reduce visible lag, though having a third thread for circuits that are being viewed or are critical or whatever might be a good idea to keep the illusion that everything is going full speed. I don't think stations will get that complicated anyway. I think a number of components that are like prefabs and contain the functionality of many different things will simplify that a good bit. No need to do the entire power supply circuit when you can just have a power supply component, right? It would be like having two different tile sets almost, one for micro stuff and one for macro stuff, with both being able to use broadcasters to interweave to create the station. Scripting would be good too, but I feel like that is a bit out of our depths for the time being.] I have a little bit of the code down, but I am lacking a clarity of how the whole thing works right now, thus why it isn't implemented.
  
  (Figuring out how to have circuits communicate with each other will be done with a "broadcast" component. It connects to another circuit's broadcast component, determines the distance between the two (distance formula) and then, depending on the resistivity of the worst component (maybe), will determine the voltage drop of that component to simulate the connection without actually simulating the other circuit. The two broadcast components store in an array any information needed for the other circuit to simulate accurately and quickly. ?The only issue with this is that it might lose efficiency memory wise if many thousands of broadcast components are used. If broadcasters also can broadcast more than one bit of information (one voltage pulse) or analogue info (like a light brightness sensor) things might get sketchy.)
 
 