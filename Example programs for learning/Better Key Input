//Including files, most of them are unused
#include <SDL.h>
#include <SDL_image.h>
#include <SDL_ttf.h>
#include <stdio.h>
#include <string>
#include <cmath>
#include <sstream>
#include <time.h>
#include <iostream>

//Declaring variables (globals - do not do this in the main game)
float xvel = 0;
float yvel = 0;
int next = 0;
float x = 0;
float y = 0;
int screenwidth = 640;
int screenheight = 480;
int texturesize = 60;

//initializing everything
int main(int argc, char ** argv)
{
	//if quit = true then the function will makeit quit
	bool quit = false;
	//Event
	SDL_Event event;
	//Init
	SDL_Init(SDL_INIT_VIDEO);
	IMG_Init(IMG_INIT_PNG);

	//Opens window, with the specified name, xpos, ypos, length and height
	SDL_Window * window = SDL_CreateWindow("SDL2 Sprite Sheets",
		SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, screenwidth,
		screenheight, 0);
	//Rendering of objects
	SDL_Renderer * renderer = SDL_CreateRenderer(window, -1, 0);
	//Gets an image and creates a texture from it
	SDL_Surface * image = IMG_Load("moon2.png");
	SDL_Texture * texture = SDL_CreateTextureFromSurface(renderer,
		image);
	//Color for the renderer
	SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255);
	//Clears (this will not be used in this function to make the patterns)
	SDL_RenderClear(renderer);
	//Event handler
	SDL_Event e;

	while (!quit)
	{

		//To use keys and such

		//Handle events on queue, only quit because you may need multiple key presses at once
		while (SDL_PollEvent(&e) != 0)
		{
			//User requests quit
			if (e.type == SDL_QUIT)
			{
				quit = true;
			}
		}
		//Able to handle multiple key presses
		const Uint8* currentKeyStates = SDL_GetKeyboardState(NULL);
		if (currentKeyStates[SDL_SCANCODE_UP])
		{
			yvel -= 0.001;
		}
		if (currentKeyStates[SDL_SCANCODE_DOWN])
		{
			yvel += 0.001;
		}
		if (currentKeyStates[SDL_SCANCODE_LEFT])
		{
			xvel -= 0.001;
		}
		if (currentKeyStates[SDL_SCANCODE_RIGHT])
		{
			xvel += 0.001;
		}

		//Slows velocities down every time the clock ticks 25 times
		//just comment it out if you don't want the ball slowed
		/*
		if (clock() > next)
		{
			next += 25;
			xvel = xvel * .995;
			yvel = yvel * .995;
		}
		*/

		//Xpos of the ball + the xvel, y for y
		x += xvel;
		y += yvel;

		//If the texture goes past the edge, loop
		if (x > screenwidth - texturesize){
			x = 0;
		}
		if (x < 0){
			x = screenwidth - texturesize;
		}
		//Just a warning : the surface takes the position from the top left, so you have to adjust for the sprite's size
		if (y > screenheight - texturesize){
			y = 0;
		}
		if (y < 0){
			y = screenheight - texturesize;
		}

		//Renders and stuff, (animation of sprite + Locations)
		Uint32 ticks = SDL_GetTicks();
		Uint32 sprite = (ticks / 100) % 14;
		SDL_Rect srcrect = { sprite * 14, 0, 13, 13 };
		SDL_Rect dstrect = { x, y, 13*5, 13*5 };
		SDL_Rect dstrect2 = { x * -1 + screenwidth - texturesize, y * -1 + screenheight - texturesize, 13 * 5, 13 * 5 };
		SDL_Rect dstrect3 = { x * -1 + screenwidth - texturesize, y, 13 * 5, 13 * 5 };
		SDL_Rect dstrect4 = { x, y * -1 + screenheight - texturesize, 13 * 5, 13 * 5 };
			
		//This would be used if I wanted to update the screen, but that's no fun
		//SDL_RenderClear(renderer);

		//Renders the textures to the screen
		SDL_RenderCopy(renderer, texture, &srcrect, &dstrect);
		SDL_RenderCopy(renderer, texture, &srcrect, &dstrect2);
		SDL_RenderCopy(renderer, texture, &srcrect, &dstrect3);
		SDL_RenderCopy(renderer, texture, &srcrect, &dstrect4);
		//Refeshes
		SDL_RenderPresent(renderer);
	}
	//Destroys and quits
	SDL_DestroyTexture(texture);
	SDL_FreeSurface(image);
	SDL_DestroyRenderer(renderer);
	SDL_DestroyWindow(window);
	IMG_Quit();
	SDL_Quit();

	return 0;
}
